import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.6'
}

group = 'com.hugopalma'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

sourceSets {
    main {
        java {
            srcDirs += 'src/generated/java'
        }
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springAiVersion', "1.0.0")
}

dependencies {
    implementation 'org.springframework.ai:spring-ai-starter-mcp-server'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Native integration tests - requires native build
tasks.register('nativeIntegrationTest', Test) {
    useJUnitPlatform()
    systemProperty 'test.native.integration', 'true'
}
nativeIntegrationTest.dependsOn nativeCompile

// Generate tool descriptions
tasks.register('generateToolDescriptions') {
    doLast {
        def metadata = fetchSpringInitializrMetadata()

        def templateFile = file('src/templates/SpringInitialzrConstants.java')
        def outputFile = file('src/generated/java/com/hugopalma/springinitializrmcp/SpringInitialzrConstants.java')

        outputFile.parentFile.mkdirs()
        outputFile.text = templateFile.text.replace('${JAVA_VERSION_DEFAULT_AND_SUPPORTED}', 'Defaults to \'' + metadata.javaVersion?.default + '\'. Supported values: \'' + metadata.javaVersion?.values?.collect { it.id }.join('\', \'') + '\'.')
    }
}

static def fetchSpringInitializrMetadata() {
    def url = new URI("https://start.spring.io/metadata/client").toURL()
    def connection = url.openConnection()
    connection.setConnectTimeout(5000)
    connection.setReadTimeout(10000)

    if (connection.responseCode == 200) {
        def jsonText = connection.inputStream.text
        def jsonSlurper = new JsonSlurper()
        return jsonSlurper.parseText(jsonText)
    } else {
        throw new RuntimeException("Failed to fetch metadata: HTTP ${connection.responseCode}")
    }
}
